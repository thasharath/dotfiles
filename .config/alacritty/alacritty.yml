# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
# env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  # TERM: xterm-256color
  #

# Window Customization
window:
  dimensions:
    columns: 100
    lines: 35
  padding:
    x: 5
    y: 2
  decorations: none
scrolling:
  history: 10000
  multiplier: 5
background_opacity: 0.95
dynamic_title: true

# Font configuration
font:
  normal:
    family: FiraCode Nerd Font Mono
    style: Regular
  bold:
    family: FiraCode Nerd Font Mono
    style: Bold
  italic:
    family: FiraCode Nerd Font Mono
    style: Italic
  bold_italic:
    family: FiraCode Nerd Font Mono
    style: Bold Italic
  size: 9.5
  # offset:
  #  x: 0
  #  y: 0
  #glyph_offset:
  #  x: 0
  #  y: 0
draw_bold_text_with_bright_colors: false

cursor:
  style: Block
  unfocused_hollow: true

mouse:
  url:
    launcher:
      program: xdg-open
    modifiers: None

# # Colors (Dracula)
# colors:
#   # Default colors
#   primary:
#     background: '#282a36'
#     foreground: '#f8f8f2'
#   # Normal colors
#   normal:
#     black:   '#000000'
#     red:     '#ff5555'
#     green:   '#50fa7b'
#     yellow:  '#f1fa8c'
#     blue:    '#caa9fa'
#     magenta: '#ff79c6'
#     cyan:    '#8be9fd'
#     white:   '#bfbfbf'
#   # Bright colors
#   bright:
#     black:   '#575b70'
#     red:     '#ff6e67'
#     green:   '#5af78e'
#     yellow:  '#f4f99d'
#     blue:    '#caa9fa'
#     magenta: '#ff92d0'
#     cyan:    '#9aedfe'
#     white:   '#e6e6e6'
#   cursor:
#     text: '#000000'
#     cursor: '#ffff00'

# Colors (Nord)
colors:
   # Default colors
   primary:
     background: '#2E3440'
     foreground: '#D8DEE9'
   # Normal colors
   normal:
     black:   '#3B4252'
     red:     '#BF616A'
     green:   '#A3BE8C'
     yellow:  '#EBCB8B'
     blue:    '#81A1C1'
     magenta: '#B48EAD'
     cyan:    '#88C0D0'
     white:   '#E5E9F0'
   # Bright colors
   bright:
     black:   '#4C566A'
     red:     '#BF616A'
     green:   '#A3BE8C'
     yellow:  '#EBCB8B'
     blue:    '#81A1C1'
     magenta: '#B48EAD'
     cyan:    '#8FBCBB'
     white:   '#ECEFF4'
   cursor:
     text: '#000000'
     cursor: '#ffff00'



# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # (Windows, Linux, and BSD only)
  - { key: V,        mods: Alt,           action: Paste            }
  - { key: C,        mods: Alt,           action: Copy             }
  # - { key: V,        mods: Control|Shift, action: None             }
  - { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Add,      mods: Control,       action: IncreaseFontSize }
  - { key: Subtract, mods: Control,       action: DecreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }
  - { key: F11,                           action: ToggleFullscreen }
  - { key: T,        mods: Control,       action: SpawnNewInstance }
  - { key: Home,     mods: Control,       action: ScrollToTop      }

  #- { key: Paste,                    action: Paste                            }
  #- { key: Copy,                     action: Copy                             }
  #- { key: L,         mods: Control, action: ClearLogNotice                   }
  #- { key: L,         mods: Control, chars: "\x0c"                            }
  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
